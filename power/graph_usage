#!/usr/bin/env python2


import argparse
from datetime import date
import os.path

try:
    import rrdtool
except ImportError:
    rrdtool = None

def graph_usage(www_dir, database, cost=None, debug=False):
    common_args = [
        '--imgformat', 'PNG',
        '--width', '600',
        '--height', '300',
        '--lower-limit', '0',
        '--units-exponent', '0',
        '--left-axis-format', '%1.2lf',
        '--vertical-label', 'Watts',
        'DEF:daWh_rate=%s:decawatts:AVERAGE' % database,
        # Convert the daWh rate that rrdtool wants to graph into the total daWh
        # consumed over the step interval.
        'CDEF:daWh=daWh_rate,900,*',
        # Convert to average Watts over the step interval because that's easier
        # to understand.
        # The electric company uses kWh for billing so convert to that.
        'CDEF:watts=daWh,40,*',
        'AREA:watts#ff0000:Power',
        # rrdtool does the right thing for the TOTAL function but we need to
        # convert the daWh rate into a kWh rate and get the TOTAL of that rate.
        'CDEF:kwh_rate=daWh_rate,100,/',
        'VDEF:total_kwh=kwh_rate,TOTAL',
        'COMMENT:\\n',
        'GPRINT:total_kwh:Total %0.3lf kWh\\n',
    ]

    def graph(*args):
        if not debug:
            rrdtool.graph(*args)
        else:
            print("rrdtool graph {}".format(' '.join(args)))

    if cost:
        common_args.extend([
            'CDEF:cost_=kwh_rate,%f,*' % cost,
            'VDEF:cost=cost_,TOTAL',
            'GPRINT:cost:Cost  $%0.3lf\\n',
        ])

    # Graph today and yesterday.
    graph(
        os.path.join(www_dir, 'today_usage.png'),
        '--start', 'midnight today',
        '--end', 'midnight tomorrow',
        *common_args
    )
    graph(
        os.path.join(www_dir, 'yesterday_usage.png'),
        '--start', 'midnight yesterday',
        '--end', 'midnight today',
        *common_args
    )

    # Graph current week.
    graph(
        os.path.join(www_dir, 'week_usage.png'),
        '--start', 'midnight Sunday',
        '--end', 'midnight Saturday+24h',
        *common_args
    )

    # Graph current month.
    today = date.today()
    next_month = today.month + 1
    next_year = today.year
    if next_month > 12:
        next_month = 1
        next_year += 1
    end_date = today.replace(year=next_year, month=next_month)
    graph(
        os.path.join(www_dir, 'month_usage.png'),
        '--start', today.strftime('midnight %B 01 %Y'),
        '--end', end_date.strftime('midnight %B 01 %Y'),
        *common_args
    )


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('--database', '-d', required=True, help="RRDtool database")
    parser.add_argument('--www-dir', '-o', required=True,
                        help="Graph output directory")
    parser.add_argument('--cost', '-c', type=float, help="kWh cost")
    parser.add_argument('--debug', action='store_true', dest='debug', default=False,
                        help="Debug mode, don't run commands")
    args = parser.parse_args()
    return args


def main():
    args = parse_args()
    if rrdtool is None and not args.debug:
        print("Unable to import rrdtool and not in debug mode.")
        return
    graph_usage(args.www_dir, args.database, cost=args.cost, debug=args.debug)


if __name__ == '__main__':
    main()
